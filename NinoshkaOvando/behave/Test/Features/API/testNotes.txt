1. Matching a step with a regular expression
#
2. reutilizar codigo
// Implement more test cases where the steps is similar and variable
Scenario: This is the first scenario
Given I have $100 in my account
AND I have $200 in my account
---
@given(u'I have $100 in my account')
def step_impl(context):
    raise NotImplementedError(u'STEP: Given I have $100 in my account')

@given(u'I have $200 in my account')
def step_impl(context):
    raise NotImplementedError(u'STEP: Given I have $200 in my account')
---
2. answer
Definir as parametro ${amount}
@given(u'I have ${amount} in my account')
def step_impl(context, amount):
    raise NotImplementedError(u'STEP: Given I have ${amount} in my account')

3. cuando tengo que crear otro step, cuando el comportamiento es diferent
Ejemplo: guardar y extraer en un step pero con + o -
si el - esta fallando, el gurdar no falla, crear en dos steps
4. predefinir el tipo de dato de las variables
w letras an underscore  --> output String
s whitespace
S non - Whitespace
d digit

4. Practice
Scenario: Validate zipcode a(numbers) , county(letter or undercore) and nro habitants(number with thousend)
Given I have the following input data: 456852 zipcode, new_zeland county, 100.000.152 nro habitants
When days process is calculated
Then the correct successfully message include days and data entered
-----
@given(u'I have the following input data: {x:d} zipcode, {y:w} county, {z:n} nro habitants')
def step_impl(context, x, y, z):
    a =x

-------=======================================================
==============================================================
1. Regular expression to verify a email
2. Install as type of machers or assertions
pip install compare
python -m pip install compare
--- brinda una libreria que da mas detalle de lo esperado o comparado
--- feature files are staticos and it need to compare with something dinamic
--- expect(amount).to_equal('100')
-- amount is dinamic
--- For example
--- valores staticos
Give I have "2" and "2"
When I select "sum"
Then my result should be "4"
--- valores dinamicos
def sum(a,b)
return a+b
--- expect(value).to_equal(expected_value)
--- expect(value)== expected_value
both are the same

---- expect(value).to_be_greater_than_or_equal_to(expected_value)
expect(value)>= expected_value
---- to_be_less_than_or_equal_to
---- to_be_less_than

--- expect(a1).to_be(a2) (validation for identity)
cuan sierto o falso es una expresion todo lo qe es 0 es false or todo lo que es difrente de 0 es true
---- expect(value).to_be_truthy()
---- expect(value).to_be_falsy()
====================================================
scenario outline
----------------
patrones de pasos con diferentes datos,
carga una lista de datos

Ejemplo:
Given I login as "Ana"
And the pass is "123"
when I click on login button
then I message "Welcome Ana"

data input:
user    Pass
a1      pass1
a2      pass1
a3      pass1



